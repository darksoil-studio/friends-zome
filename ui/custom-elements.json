{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "locales/locales.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "sourceLocale",
          "default": "`en`",
          "description": "The locale code that templates in this source code are written in."
        },
        {
          "kind": "variable",
          "name": "targetLocales",
          "type": {
            "text": "array"
          },
          "default": "[ , ]",
          "description": "The other locale codes that this application is localized into. Sorted\nlexicographically."
        },
        {
          "kind": "variable",
          "name": "allLocales",
          "type": {
            "text": "array"
          },
          "default": "[ `en`, ]",
          "description": "All valid project locale codes. Sorted lexicographically."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceLocale",
          "declaration": {
            "name": "sourceLocale",
            "module": "locales/locales.js"
          }
        },
        {
          "kind": "js",
          "name": "targetLocales",
          "declaration": {
            "name": "targetLocales",
            "module": "locales/locales.js"
          }
        },
        {
          "kind": "js",
          "name": "allLocales",
          "declaration": {
            "name": "allLocales",
            "module": "locales/locales.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/config.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultConfig",
          "type": {
            "text": "FriendsConfig"
          },
          "default": "{ avatarMode: 'avatar-required', additionalFields: [], minNicknameLength: 3, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultConfig",
          "declaration": {
            "name": "defaultConfig",
            "module": "src/config.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "friendsStoreContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "friendsStoreContext",
          "declaration": {
            "name": "friendsStoreContext",
            "module": "src/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/friends-client.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FriendsClient",
          "members": [
            {
              "kind": "method",
              "name": "setMyProfile",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "profile",
                  "type": {
                    "text": "Profile"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sendFriendRequest",
              "return": {
                "type": {
                  "text": "Promise<EntryHash>"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "agents",
                  "type": {
                    "text": "AgentPubKey[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "acceptFriendRequest",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "friendRequestHash",
                  "type": {
                    "text": "EntryHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "rejectFriendRequest",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "friendRequestHash",
                  "type": {
                    "text": "EntryHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cancelFriendRequest",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "friendRequestHash",
                  "type": {
                    "text": "EntryHash"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeFriend",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "agents",
                  "type": {
                    "text": "AgentPubKey[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "queryAllFriends",
              "return": {
                "type": {
                  "text": "Promise<Friend[]>"
                }
              }
            }
          ],
          "superclass": {
            "name": "PrivateEventSourcingClient",
            "package": "@darksoil-studio/private-event-sourcing-zome"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FriendsClient",
          "declaration": {
            "name": "FriendsClient",
            "module": "src/friends-client.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/friends-store.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FriendsStore",
          "members": [
            {
              "kind": "field",
              "name": "profilesArePublic",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "myPubKey",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "myProfile",
              "default": "new AsyncComputed(() => { const privateEvents = this.privateEvents.get(); if (privateEvents.status !== 'completed') return privateEvents; let myDevices = [this.client.client.myPubKey]; if (this.linkedDevicesStore) { const myLinkedDevices = this.linkedDevicesStore.myLinkedDevices.get(); if (myLinkedDevices.status !== 'completed') return myLinkedDevices; myDevices = [this.client.client.myPubKey, ...myLinkedDevices.value]; } let myProfile: [Timestamp, Profile] | undefined; for (const [entryHash, entry] of Object.entries(privateEvents.value)) { if (entry.event.content.type !== 'SetProfile') continue; if ( !myDevices.find( myDevice => encodeHashToBase64(entry.author) === encodeHashToBase64(myDevice), ) ) continue; const profile = entry.event.content.profile; if (!myProfile || myProfile[0] < entry.event.timestamp) { myProfile = [entry.event.timestamp, profile]; } } return { status: 'completed', value: myProfile ? myProfile[1] : undefined, }; })"
            },
            {
              "kind": "field",
              "name": "pendingFriendRequests",
              "default": "new AsyncComputed(() => { const privateEvents = this.privateEvents.get(); if (privateEvents.status !== 'completed') return privateEvents; const friendRequests: Record<EntryHashB64, SignedEvent<FriendRequest>> = {}; for (const [entryHash, entry] of Object.entries(privateEvents.value)) { if (entry.event.content.type === 'FriendRequest') { friendRequests[entryHash] = entry as SignedEvent<FriendRequest>; } } for (const [entryHash, entry] of Object.entries(privateEvents.value)) { if ( entry.event.content.type === 'AcceptFriendRequest' || entry.event.content.type === 'RejectFriendRequest' || entry.event.content.type === 'CancelFriendRequest' ) { delete friendRequests[ encodeHashToBase64(entry.event.content.friend_request_hash) ]; } } return { status: 'completed', value: friendRequests }; })"
            },
            {
              "kind": "field",
              "name": "friends"
            },
            {
              "kind": "field",
              "name": "currentProfileForAgent",
              "default": "new MemoHoloHashMap( agent => new AsyncComputed(() => { if (encodeHashToBase64(this.myPubKey) === encodeHashToBase64(agent)) { // TODO: what about when the agent is one of your other linked devices? return this.myProfile.get(); } const friends = this.friends.get(); if (friends.status !== 'completed') return friends; const friend = friends.value.find(friend => friend.agents.find( agent => encodeHashToBase64(agent) === encodeHashToBase64(agent), ), ); return { status: 'completed', value: friend?.profile, }; }), )"
            },
            {
              "kind": "method",
              "name": "search",
              "return": {
                "type": {
                  "text": "Promise<Array<User>>"
                }
              },
              "parameters": [
                {
                  "name": "nameFilter",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "PrivateEventSourcingStore",
            "package": "@darksoil-studio/private-event-sourcing-zome"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FriendsStore",
          "declaration": {
            "name": "FriendsStore",
            "module": "src/friends-store.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./friends-store.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./friends-client.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./context.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/mocks.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FriendsZomeMock",
          "superclass": {
            "name": "ZomeMock",
            "package": "@tnesh-stack/utils"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FriendsZomeMock",
          "declaration": {
            "name": "FriendsZomeMock",
            "module": "src/mocks.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "asyncReadable",
          "parameters": [
            {
              "name": "initFn",
              "type": {
                "text": "(set: (value: T) => void) => Promise<(() => void) | void>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "asyncReadable",
          "declaration": {
            "name": "asyncReadable",
            "module": "src/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/create-profile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that fires event on value change.",
          "name": "CreateProfile",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "attribute": "store"
            },
            {
              "kind": "method",
              "name": "setProfile",
              "parameters": [
                {
                  "name": "profile",
                  "type": {
                    "text": "Profile"
                  }
                }
              ],
              "description": "Private properties"
            },
            {
              "kind": "method",
              "name": "renderField",
              "parameters": [
                {
                  "name": "fieldConfig",
                  "type": {
                    "text": "FieldConfig"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "profile-created",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired after the profile has been created. Detail will have this shape: { profile: { nickname, fields } }"
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "fieldName": "store"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "create-profile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CreateProfile",
          "declaration": {
            "name": "CreateProfile",
            "module": "src/elements/create-profile.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "create-profile",
          "declaration": {
            "name": "CreateProfile",
            "module": "src/elements/create-profile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/friend-request-qr-code.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isTauriEnv"
        },
        {
          "kind": "variable",
          "name": "isMobile"
        },
        {
          "kind": "function",
          "name": "scanQrcode",
          "return": {
            "type": {
              "text": "Promise<string>"
            }
          }
        },
        {
          "kind": "function",
          "name": "scanQrCodeAndSendFriendRequest",
          "parameters": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "FriendRequestQrCode",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "256",
              "attribute": "size"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "256",
              "fieldName": "size"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "friend-request-qr-code",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isTauriEnv",
          "declaration": {
            "name": "isTauriEnv",
            "module": "src/elements/friend-request-qr-code.ts"
          }
        },
        {
          "kind": "js",
          "name": "isMobile",
          "declaration": {
            "name": "isMobile",
            "module": "src/elements/friend-request-qr-code.ts"
          }
        },
        {
          "kind": "js",
          "name": "scanQrcode",
          "declaration": {
            "name": "scanQrcode",
            "module": "src/elements/friend-request-qr-code.ts"
          }
        },
        {
          "kind": "js",
          "name": "scanQrCodeAndSendFriendRequest",
          "declaration": {
            "name": "scanQrCodeAndSendFriendRequest",
            "module": "src/elements/friend-request-qr-code.ts"
          }
        },
        {
          "kind": "js",
          "name": "FriendRequestQrCode",
          "declaration": {
            "name": "FriendRequestQrCode",
            "module": "src/elements/friend-request-qr-code.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "friend-request-qr-code",
          "declaration": {
            "name": "FriendRequestQrCode",
            "module": "src/elements/friend-request-qr-code.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/friend-requests.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FriendRequests",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "attribute": "store"
            },
            {
              "kind": "method",
              "name": "renderList",
              "parameters": [
                {
                  "name": "pendingFriendRequests",
                  "type": {
                    "text": "Record<string, SignedEvent<FriendRequest>>"
                  }
                }
              ],
              "description": "Private properties"
            }
          ],
          "events": [
            {
              "description": "Fired when the user selects an agent from the list. Detail will have this shape: { profileHash: <ProfileHash as ActionHash> }",
              "name": "profile-selected"
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "fieldName": "store"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "friend-requests",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FriendRequests",
          "declaration": {
            "name": "FriendRequests",
            "module": "src/elements/friend-requests.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "friend-requests",
          "declaration": {
            "name": "FriendRequests",
            "module": "src/elements/friend-requests.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/friends-context.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FriendsContext",
          "members": [
            {
              "kind": "field",
              "name": "client",
              "type": {
                "text": "AppClient"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "attribute": "store"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "attribute": "role"
            },
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "FriendsConfig"
              },
              "default": "defaultConfig",
              "attribute": "config"
            },
            {
              "kind": "field",
              "name": "zome",
              "type": {
                "text": "string"
              },
              "default": "'friends'",
              "attribute": "zome"
            },
            {
              "kind": "field",
              "name": "linkedDevicesStore",
              "type": {
                "text": "LinkedDevicesStore"
              }
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "fieldName": "store"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "fieldName": "role"
            },
            {
              "name": "config",
              "type": {
                "text": "FriendsConfig"
              },
              "default": "defaultConfig",
              "fieldName": "config"
            },
            {
              "name": "zome",
              "type": {
                "text": "string"
              },
              "default": "'friends'",
              "fieldName": "zome"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "friends-context",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FriendsContext",
          "declaration": {
            "name": "FriendsContext",
            "module": "src/elements/friends-context.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "friends-context",
          "declaration": {
            "name": "FriendsContext",
            "module": "src/elements/friends-context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/manual-friend-request.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ManualFriendRequest",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "attribute": "store"
            },
            {
              "kind": "method",
              "name": "sendFriendRequest",
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderDialog"
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "fieldName": "store"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "manual-friend-request",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ManualFriendRequest",
          "declaration": {
            "name": "ManualFriendRequest",
            "module": "src/elements/manual-friend-request.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "manual-friend-request",
          "declaration": {
            "name": "ManualFriendRequest",
            "module": "src/elements/manual-friend-request.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/my-friends.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MyFriends",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Friends store for this element, not required if you embed this element inside a <friends-context>",
              "attribute": "store"
            },
            {
              "kind": "method",
              "name": "renderList",
              "parameters": [
                {
                  "name": "friends",
                  "type": {
                    "text": "Array<Friend>"
                  }
                }
              ],
              "description": "Private properties"
            }
          ],
          "events": [
            {
              "name": "friend-clicked",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Friends store for this element, not required if you embed this element inside a <friends-context>",
              "fieldName": "store"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "my-friends",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MyFriends",
          "declaration": {
            "name": "MyFriends",
            "module": "src/elements/my-friends.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "my-friends",
          "declaration": {
            "name": "MyFriends",
            "module": "src/elements/my-friends.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/profile-prompt.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ProfilePrompt",
          "slots": [
            {
              "description": "The content of the app",
              "name": "default"
            },
            {
              "description": "Will be displayed above the create-profile form when the user is prompted with it",
              "name": "hero"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Friends store for this element, not required if you embed this element inside a `<friends-context>`",
              "attribute": "store"
            },
            {
              "kind": "field",
              "name": "view",
              "type": {
                "text": "'question' | 'create-profile' | 'link-device'"
              },
              "privacy": "private",
              "default": "'question'",
              "description": "Private properties"
            },
            {
              "kind": "field",
              "name": "linkingDevices",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "renderContent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderPrompt",
              "privacy": "private",
              "parameters": [
                {
                  "name": "myProfileExists",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Friends store for this element, not required if you embed this element inside a `<friends-context>`",
              "fieldName": "store"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "profile-prompt",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ProfilePrompt",
          "declaration": {
            "name": "ProfilePrompt",
            "module": "src/elements/profile-prompt.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "profile-prompt",
          "declaration": {
            "name": "ProfilePrompt",
            "module": "src/elements/profile-prompt.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/select-friend.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SelectFriend",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Friends store for this element, not required if you embed this element inside a <friends-context>",
              "attribute": "store"
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string | undefined"
              },
              "description": "Private properties"
            },
            {
              "kind": "method",
              "name": "renderList",
              "parameters": [
                {
                  "name": "friends",
                  "type": {
                    "text": "Array<Friend>"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Fired when the user selects an agent from the list. Detail will have this shape: { agents: Array<AgentPubKey> }",
              "name": "friend-selected"
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Friends store for this element, not required if you embed this element inside a <friends-context>",
              "fieldName": "store"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "select-friends",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectFriend",
          "declaration": {
            "name": "SelectFriend",
            "module": "src/elements/select-friend.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "select-friend",
          "declaration": {
            "name": "SelectFriend",
            "module": "src/elements/select-friend.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/update-profile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that fires event on value change.",
          "name": "UpdateProfile",
          "members": [
            {
              "kind": "field",
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "attribute": "store"
            },
            {
              "kind": "method",
              "name": "setProfile",
              "parameters": [
                {
                  "name": "profile",
                  "type": {
                    "text": "Profile"
                  }
                }
              ],
              "description": "Private properties"
            },
            {
              "kind": "method",
              "name": "renderField",
              "parameters": [
                {
                  "name": "fieldConfig",
                  "type": {
                    "text": "FieldConfig"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderForm",
              "parameters": [
                {
                  "name": "profile",
                  "type": {
                    "text": "Profile"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "profile-updated",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired after the profile has been updated. Detail will have this shape: { profile: { nickname, fields } }"
            }
          ],
          "attributes": [
            {
              "name": "store",
              "type": {
                "text": "FriendsStore"
              },
              "description": "Profiles store for this element, not required if you embed this element inside a <profiles-context>",
              "fieldName": "store"
            }
          ],
          "mixins": [
            {
              "name": "SignalWatcher",
              "package": "@tnesh-stack/signals"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "update-profile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateProfile",
          "declaration": {
            "name": "UpdateProfile",
            "module": "src/elements/update-profile.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "update-profile",
          "declaration": {
            "name": "UpdateProfile",
            "module": "src/elements/update-profile.ts"
          }
        }
      ]
    }
  ]
}
